// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import "context"

type contextKey string

var (
	// Relationship Contexts for group_users
	groupUserWithParentsCascadingCtx = newContextual[bool]("groupUserWithParentsCascading")
	groupUserRelGroupCtx             = newContextual[bool]("group_users.groups.group_users.group_users_group_id_fkey")
	groupUserRelUserCtx              = newContextual[bool]("group_users.users.group_users.group_users_user_id_fkey")

	// Relationship Contexts for groups
	groupWithParentsCascadingCtx = newContextual[bool]("groupWithParentsCascading")
	groupRelGroupUsersCtx        = newContextual[bool]("group_users.groups.group_users.group_users_group_id_fkey")

	// Relationship Contexts for tasks
	taskWithParentsCascadingCtx = newContextual[bool]("taskWithParentsCascading")
	taskRelUserCtx              = newContextual[bool]("tasks.users.tasks.tasks_user_id_fkey")

	// Relationship Contexts for users
	userWithParentsCascadingCtx = newContextual[bool]("userWithParentsCascading")
	userRelGroupUsersCtx        = newContextual[bool]("group_users.users.group_users.group_users_user_id_fkey")
	userRelTasksCtx             = newContextual[bool]("tasks.users.tasks.tasks_user_id_fkey")
)

// Contextual is a convienience wrapper around context.WithValue and context.Value
type contextual[V any] struct {
	key contextKey
}

func newContextual[V any](key string) contextual[V] {
	return contextual[V]{key: contextKey(key)}
}

func (k contextual[V]) WithValue(ctx context.Context, val V) context.Context {
	return context.WithValue(ctx, k.key, val)
}

func (k contextual[V]) Value(ctx context.Context) (V, bool) {
	v, ok := ctx.Value(k.key).(V)
	return v, ok
}
