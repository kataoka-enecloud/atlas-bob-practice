// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	models "atlas-bob-practice/models"
)

type Factory struct {
	baseGroupUserMods GroupUserModSlice
	baseGroupMods     GroupModSlice
	baseTaskMods      TaskModSlice
	baseUserMods      UserModSlice
}

func New() *Factory {
	return &Factory{}
}

func (f *Factory) NewGroupUser(mods ...GroupUserMod) *GroupUserTemplate {
	return f.NewGroupUserWithContext(context.Background(), mods...)
}

func (f *Factory) NewGroupUserWithContext(ctx context.Context, mods ...GroupUserMod) *GroupUserTemplate {
	o := &GroupUserTemplate{f: f}

	if f != nil {
		f.baseGroupUserMods.Apply(ctx, o)
	}

	GroupUserModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingGroupUser(m *models.GroupUser) *GroupUserTemplate {
	o := &GroupUserTemplate{f: f, alreadyPersisted: true}

	o.GroupID = func() int64 { return m.GroupID }
	o.UserID = func() int64 { return m.UserID }

	ctx := context.Background()
	if m.R.Group != nil {
		GroupUserMods.WithExistingGroup(m.R.Group).Apply(ctx, o)
	}
	if m.R.User != nil {
		GroupUserMods.WithExistingUser(m.R.User).Apply(ctx, o)
	}

	return o
}

func (f *Factory) NewGroup(mods ...GroupMod) *GroupTemplate {
	return f.NewGroupWithContext(context.Background(), mods...)
}

func (f *Factory) NewGroupWithContext(ctx context.Context, mods ...GroupMod) *GroupTemplate {
	o := &GroupTemplate{f: f}

	if f != nil {
		f.baseGroupMods.Apply(ctx, o)
	}

	GroupModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingGroup(m *models.Group) *GroupTemplate {
	o := &GroupTemplate{f: f, alreadyPersisted: true}

	o.ID = func() int64 { return m.ID }
	o.Name = func() string { return m.Name }
	o.CreatedAt = func() time.Time { return m.CreatedAt }
	o.UpdatedAt = func() time.Time { return m.UpdatedAt }

	ctx := context.Background()
	if len(m.R.GroupUsers) > 0 {
		GroupMods.AddExistingGroupUsers(m.R.GroupUsers...).Apply(ctx, o)
	}

	return o
}

func (f *Factory) NewTask(mods ...TaskMod) *TaskTemplate {
	return f.NewTaskWithContext(context.Background(), mods...)
}

func (f *Factory) NewTaskWithContext(ctx context.Context, mods ...TaskMod) *TaskTemplate {
	o := &TaskTemplate{f: f}

	if f != nil {
		f.baseTaskMods.Apply(ctx, o)
	}

	TaskModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingTask(m *models.Task) *TaskTemplate {
	o := &TaskTemplate{f: f, alreadyPersisted: true}

	o.ID = func() int64 { return m.ID }
	o.Name = func() string { return m.Name }
	o.UserID = func() int64 { return m.UserID }
	o.CreatedAt = func() time.Time { return m.CreatedAt }
	o.UpdatedAt = func() time.Time { return m.UpdatedAt }

	ctx := context.Background()
	if m.R.User != nil {
		TaskMods.WithExistingUser(m.R.User).Apply(ctx, o)
	}

	return o
}

func (f *Factory) NewUser(mods ...UserMod) *UserTemplate {
	return f.NewUserWithContext(context.Background(), mods...)
}

func (f *Factory) NewUserWithContext(ctx context.Context, mods ...UserMod) *UserTemplate {
	o := &UserTemplate{f: f}

	if f != nil {
		f.baseUserMods.Apply(ctx, o)
	}

	UserModSlice(mods).Apply(ctx, o)

	return o
}

func (f *Factory) FromExistingUser(m *models.User) *UserTemplate {
	o := &UserTemplate{f: f, alreadyPersisted: true}

	o.ID = func() int64 { return m.ID }
	o.Name = func() string { return m.Name }
	o.CreatedAt = func() time.Time { return m.CreatedAt }
	o.UpdatedAt = func() time.Time { return m.UpdatedAt }

	ctx := context.Background()
	if len(m.R.GroupUsers) > 0 {
		UserMods.AddExistingGroupUsers(m.R.GroupUsers...).Apply(ctx, o)
	}
	if len(m.R.Tasks) > 0 {
		UserMods.AddExistingTasks(m.R.Tasks...).Apply(ctx, o)
	}

	return o
}

func (f *Factory) ClearBaseGroupUserMods() {
	f.baseGroupUserMods = nil
}

func (f *Factory) AddBaseGroupUserMod(mods ...GroupUserMod) {
	f.baseGroupUserMods = append(f.baseGroupUserMods, mods...)
}

func (f *Factory) ClearBaseGroupMods() {
	f.baseGroupMods = nil
}

func (f *Factory) AddBaseGroupMod(mods ...GroupMod) {
	f.baseGroupMods = append(f.baseGroupMods, mods...)
}

func (f *Factory) ClearBaseTaskMods() {
	f.baseTaskMods = nil
}

func (f *Factory) AddBaseTaskMod(mods ...TaskMod) {
	f.baseTaskMods = append(f.baseTaskMods, mods...)
}

func (f *Factory) ClearBaseUserMods() {
	f.baseUserMods = nil
}

func (f *Factory) AddBaseUserMod(mods ...UserMod) {
	f.baseUserMods = append(f.baseUserMods, mods...)
}
