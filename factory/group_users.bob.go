// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"

	models "atlas-bob-practice/models"
	"github.com/jaswdr/faker/v2"
)

type GroupUserMod interface {
	Apply(context.Context, *GroupUserTemplate)
}

type GroupUserModFunc func(context.Context, *GroupUserTemplate)

func (f GroupUserModFunc) Apply(ctx context.Context, n *GroupUserTemplate) {
	f(ctx, n)
}

type GroupUserModSlice []GroupUserMod

func (mods GroupUserModSlice) Apply(ctx context.Context, n *GroupUserTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// GroupUserTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type GroupUserTemplate struct {
	GroupID func() int64
	UserID  func() int64

	r groupUserR
	f *Factory

	alreadyPersisted bool
}

type groupUserR struct {
	Group *groupUserRGroupR
	User  *groupUserRUserR
}

type groupUserRGroupR struct {
	o *GroupTemplate
}
type groupUserRUserR struct {
	o *UserTemplate
}

// Apply mods to the GroupUserTemplate
func (o *GroupUserTemplate) Apply(ctx context.Context, mods ...GroupUserMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.GroupUser
// according to the relationships in the template. Nothing is inserted into the db
func (t GroupUserTemplate) setModelRels(o *models.GroupUser) {
	if t.r.Group != nil {
		rel := t.r.Group.o.Build()
		rel.R.GroupUsers = append(rel.R.GroupUsers, o)
		o.GroupID = rel.ID // h2
		o.R.Group = rel
	}

	if t.r.User != nil {
		rel := t.r.User.o.Build()
		rel.R.GroupUsers = append(rel.R.GroupUsers, o)
		o.UserID = rel.ID // h2
		o.R.User = rel
	}
}

// Build returns an *models.GroupUser
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use GroupUserTemplate.Create
func (o GroupUserTemplate) Build() *models.GroupUser {
	m := &models.GroupUser{}

	if o.GroupID != nil {
		m.GroupID = o.GroupID()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.GroupUserSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use GroupUserTemplate.CreateMany
func (o GroupUserTemplate) BuildMany(number int) models.GroupUserSlice {
	m := make(models.GroupUserSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

// GroupUser has methods that act as mods for the GroupUserTemplate
var GroupUserMods groupUserMods

type groupUserMods struct{}

func (m groupUserMods) RandomizeAllColumns(f *faker.Faker) GroupUserMod {
	return GroupUserModSlice{
		GroupUserMods.RandomGroupID(f),
		GroupUserMods.RandomUserID(f),
	}
}

// Set the model columns to this value
func (m groupUserMods) GroupID(val int64) GroupUserMod {
	return GroupUserModFunc(func(_ context.Context, o *GroupUserTemplate) {
		o.GroupID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m groupUserMods) GroupIDFunc(f func() int64) GroupUserMod {
	return GroupUserModFunc(func(_ context.Context, o *GroupUserTemplate) {
		o.GroupID = f
	})
}

// Clear any values for the column
func (m groupUserMods) UnsetGroupID() GroupUserMod {
	return GroupUserModFunc(func(_ context.Context, o *GroupUserTemplate) {
		o.GroupID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m groupUserMods) RandomGroupID(f *faker.Faker) GroupUserMod {
	return GroupUserModFunc(func(_ context.Context, o *GroupUserTemplate) {
		o.GroupID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m groupUserMods) UserID(val int64) GroupUserMod {
	return GroupUserModFunc(func(_ context.Context, o *GroupUserTemplate) {
		o.UserID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m groupUserMods) UserIDFunc(f func() int64) GroupUserMod {
	return GroupUserModFunc(func(_ context.Context, o *GroupUserTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m groupUserMods) UnsetUserID() GroupUserMod {
	return GroupUserModFunc(func(_ context.Context, o *GroupUserTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m groupUserMods) RandomUserID(f *faker.Faker) GroupUserMod {
	return GroupUserModFunc(func(_ context.Context, o *GroupUserTemplate) {
		o.UserID = func() int64 {
			return random_int64(f)
		}
	})
}

func (m groupUserMods) WithParentsCascading() GroupUserMod {
	return GroupUserModFunc(func(ctx context.Context, o *GroupUserTemplate) {
		if isDone, _ := groupUserWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = groupUserWithParentsCascadingCtx.WithValue(ctx, true)
		{

			related := o.f.NewGroupWithContext(ctx, GroupMods.WithParentsCascading())
			m.WithGroup(related).Apply(ctx, o)
		}
		{

			related := o.f.NewUserWithContext(ctx, UserMods.WithParentsCascading())
			m.WithUser(related).Apply(ctx, o)
		}
	})
}

func (m groupUserMods) WithGroup(rel *GroupTemplate) GroupUserMod {
	return GroupUserModFunc(func(ctx context.Context, o *GroupUserTemplate) {
		o.r.Group = &groupUserRGroupR{
			o: rel,
		}
	})
}

func (m groupUserMods) WithNewGroup(mods ...GroupMod) GroupUserMod {
	return GroupUserModFunc(func(ctx context.Context, o *GroupUserTemplate) {
		related := o.f.NewGroupWithContext(ctx, mods...)

		m.WithGroup(related).Apply(ctx, o)
	})
}

func (m groupUserMods) WithExistingGroup(em *models.Group) GroupUserMod {
	return GroupUserModFunc(func(ctx context.Context, o *GroupUserTemplate) {
		o.r.Group = &groupUserRGroupR{
			o: o.f.FromExistingGroup(em),
		}
	})
}

func (m groupUserMods) WithoutGroup() GroupUserMod {
	return GroupUserModFunc(func(ctx context.Context, o *GroupUserTemplate) {
		o.r.Group = nil
	})
}

func (m groupUserMods) WithUser(rel *UserTemplate) GroupUserMod {
	return GroupUserModFunc(func(ctx context.Context, o *GroupUserTemplate) {
		o.r.User = &groupUserRUserR{
			o: rel,
		}
	})
}

func (m groupUserMods) WithNewUser(mods ...UserMod) GroupUserMod {
	return GroupUserModFunc(func(ctx context.Context, o *GroupUserTemplate) {
		related := o.f.NewUserWithContext(ctx, mods...)

		m.WithUser(related).Apply(ctx, o)
	})
}

func (m groupUserMods) WithExistingUser(em *models.User) GroupUserMod {
	return GroupUserModFunc(func(ctx context.Context, o *GroupUserTemplate) {
		o.r.User = &groupUserRUserR{
			o: o.f.FromExistingUser(em),
		}
	})
}

func (m groupUserMods) WithoutUser() GroupUserMod {
	return GroupUserModFunc(func(ctx context.Context, o *GroupUserTemplate) {
		o.r.User = nil
	})
}
