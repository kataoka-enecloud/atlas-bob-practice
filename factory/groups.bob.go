// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"testing"
	"time"

	models "atlas-bob-practice/models"
	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
)

type GroupMod interface {
	Apply(context.Context, *GroupTemplate)
}

type GroupModFunc func(context.Context, *GroupTemplate)

func (f GroupModFunc) Apply(ctx context.Context, n *GroupTemplate) {
	f(ctx, n)
}

type GroupModSlice []GroupMod

func (mods GroupModSlice) Apply(ctx context.Context, n *GroupTemplate) {
	for _, f := range mods {
		f.Apply(ctx, n)
	}
}

// GroupTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type GroupTemplate struct {
	ID        func() int64
	Name      func() string
	CreatedAt func() time.Time
	UpdatedAt func() time.Time

	r groupR
	f *Factory

	alreadyPersisted bool
}

type groupR struct {
	GroupUsers []*groupRGroupUsersR
}

type groupRGroupUsersR struct {
	number int
	o      *GroupUserTemplate
}

// Apply mods to the GroupTemplate
func (o *GroupTemplate) Apply(ctx context.Context, mods ...GroupMod) {
	for _, mod := range mods {
		mod.Apply(ctx, o)
	}
}

// setModelRels creates and sets the relationships on *models.Group
// according to the relationships in the template. Nothing is inserted into the db
func (t GroupTemplate) setModelRels(o *models.Group) {
	if t.r.GroupUsers != nil {
		rel := models.GroupUserSlice{}
		for _, r := range t.r.GroupUsers {
			related := r.o.BuildMany(r.number)
			for _, rel := range related {
				rel.GroupID = o.ID // h2
				rel.R.Group = o
			}
			rel = append(rel, related...)
		}
		o.R.GroupUsers = rel
	}
}

// BuildSetter returns an *models.GroupSetter
// this does nothing with the relationship templates
func (o GroupTemplate) BuildSetter() *models.GroupSetter {
	m := &models.GroupSetter{}

	if o.ID != nil {
		val := o.ID()
		m.ID = omit.From(val)
	}
	if o.Name != nil {
		val := o.Name()
		m.Name = omit.From(val)
	}
	if o.CreatedAt != nil {
		val := o.CreatedAt()
		m.CreatedAt = omit.From(val)
	}
	if o.UpdatedAt != nil {
		val := o.UpdatedAt()
		m.UpdatedAt = omit.From(val)
	}

	return m
}

// BuildManySetter returns an []*models.GroupSetter
// this does nothing with the relationship templates
func (o GroupTemplate) BuildManySetter(number int) []*models.GroupSetter {
	m := make([]*models.GroupSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Group
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use GroupTemplate.Create
func (o GroupTemplate) Build() *models.Group {
	m := &models.Group{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	o.setModelRels(m)

	return m
}

// BuildMany returns an models.GroupSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use GroupTemplate.CreateMany
func (o GroupTemplate) BuildMany(number int) models.GroupSlice {
	m := make(models.GroupSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableGroup(m *models.GroupSetter) {
	if !(m.Name.IsValue()) {
		val := random_string(nil, "20")
		m.Name = omit.From(val)
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Group
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *GroupTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Group) error {
	var err error

	return err
}

// Create builds a group and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *GroupTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Group, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableGroup(opt)

	m, err := models.Groups.Insert(opt).One(ctx, exec)
	if err != nil {
		return nil, err
	}

	if err := o.insertOptRels(ctx, exec, m); err != nil {
		return nil, err
	}
	return m, err
}

// MustCreate builds a group and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o *GroupTemplate) MustCreate(ctx context.Context, exec bob.Executor) *models.Group {
	m, err := o.Create(ctx, exec)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateOrFail builds a group and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o *GroupTemplate) CreateOrFail(ctx context.Context, tb testing.TB, exec bob.Executor) *models.Group {
	tb.Helper()
	m, err := o.Create(ctx, exec)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// CreateMany builds multiple groups and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o GroupTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.GroupSlice, error) {
	var err error
	m := make(models.GroupSlice, number)

	for i := range m {
		m[i], err = o.Create(ctx, exec)
		if err != nil {
			return nil, err
		}
	}

	return m, nil
}

// MustCreateMany builds multiple groups and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// panics if an error occurs
func (o GroupTemplate) MustCreateMany(ctx context.Context, exec bob.Executor, number int) models.GroupSlice {
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		panic(err)
	}
	return m
}

// CreateManyOrFail builds multiple groups and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// It calls `tb.Fatal(err)` on the test/benchmark if an error occurs
func (o GroupTemplate) CreateManyOrFail(ctx context.Context, tb testing.TB, exec bob.Executor, number int) models.GroupSlice {
	tb.Helper()
	m, err := o.CreateMany(ctx, exec, number)
	if err != nil {
		tb.Fatal(err)
		return nil
	}
	return m
}

// Group has methods that act as mods for the GroupTemplate
var GroupMods groupMods

type groupMods struct{}

func (m groupMods) RandomizeAllColumns(f *faker.Faker) GroupMod {
	return GroupModSlice{
		GroupMods.RandomID(f),
		GroupMods.RandomName(f),
		GroupMods.RandomCreatedAt(f),
		GroupMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m groupMods) ID(val int64) GroupMod {
	return GroupModFunc(func(_ context.Context, o *GroupTemplate) {
		o.ID = func() int64 { return val }
	})
}

// Set the Column from the function
func (m groupMods) IDFunc(f func() int64) GroupMod {
	return GroupModFunc(func(_ context.Context, o *GroupTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m groupMods) UnsetID() GroupMod {
	return GroupModFunc(func(_ context.Context, o *GroupTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m groupMods) RandomID(f *faker.Faker) GroupMod {
	return GroupModFunc(func(_ context.Context, o *GroupTemplate) {
		o.ID = func() int64 {
			return random_int64(f)
		}
	})
}

// Set the model columns to this value
func (m groupMods) Name(val string) GroupMod {
	return GroupModFunc(func(_ context.Context, o *GroupTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m groupMods) NameFunc(f func() string) GroupMod {
	return GroupModFunc(func(_ context.Context, o *GroupTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m groupMods) UnsetName() GroupMod {
	return GroupModFunc(func(_ context.Context, o *GroupTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m groupMods) RandomName(f *faker.Faker) GroupMod {
	return GroupModFunc(func(_ context.Context, o *GroupTemplate) {
		o.Name = func() string {
			return random_string(f, "20")
		}
	})
}

// Set the model columns to this value
func (m groupMods) CreatedAt(val time.Time) GroupMod {
	return GroupModFunc(func(_ context.Context, o *GroupTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m groupMods) CreatedAtFunc(f func() time.Time) GroupMod {
	return GroupModFunc(func(_ context.Context, o *GroupTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m groupMods) UnsetCreatedAt() GroupMod {
	return GroupModFunc(func(_ context.Context, o *GroupTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m groupMods) RandomCreatedAt(f *faker.Faker) GroupMod {
	return GroupModFunc(func(_ context.Context, o *GroupTemplate) {
		o.CreatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

// Set the model columns to this value
func (m groupMods) UpdatedAt(val time.Time) GroupMod {
	return GroupModFunc(func(_ context.Context, o *GroupTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m groupMods) UpdatedAtFunc(f func() time.Time) GroupMod {
	return GroupModFunc(func(_ context.Context, o *GroupTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m groupMods) UnsetUpdatedAt() GroupMod {
	return GroupModFunc(func(_ context.Context, o *GroupTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m groupMods) RandomUpdatedAt(f *faker.Faker) GroupMod {
	return GroupModFunc(func(_ context.Context, o *GroupTemplate) {
		o.UpdatedAt = func() time.Time {
			return random_time_Time(f)
		}
	})
}

func (m groupMods) WithParentsCascading() GroupMod {
	return GroupModFunc(func(ctx context.Context, o *GroupTemplate) {
		if isDone, _ := groupWithParentsCascadingCtx.Value(ctx); isDone {
			return
		}
		ctx = groupWithParentsCascadingCtx.WithValue(ctx, true)
	})
}

func (m groupMods) WithGroupUsers(number int, related *GroupUserTemplate) GroupMod {
	return GroupModFunc(func(ctx context.Context, o *GroupTemplate) {
		o.r.GroupUsers = []*groupRGroupUsersR{{
			number: number,
			o:      related,
		}}
	})
}

func (m groupMods) WithNewGroupUsers(number int, mods ...GroupUserMod) GroupMod {
	return GroupModFunc(func(ctx context.Context, o *GroupTemplate) {
		related := o.f.NewGroupUserWithContext(ctx, mods...)
		m.WithGroupUsers(number, related).Apply(ctx, o)
	})
}

func (m groupMods) AddGroupUsers(number int, related *GroupUserTemplate) GroupMod {
	return GroupModFunc(func(ctx context.Context, o *GroupTemplate) {
		o.r.GroupUsers = append(o.r.GroupUsers, &groupRGroupUsersR{
			number: number,
			o:      related,
		})
	})
}

func (m groupMods) AddNewGroupUsers(number int, mods ...GroupUserMod) GroupMod {
	return GroupModFunc(func(ctx context.Context, o *GroupTemplate) {
		related := o.f.NewGroupUserWithContext(ctx, mods...)
		m.AddGroupUsers(number, related).Apply(ctx, o)
	})
}

func (m groupMods) AddExistingGroupUsers(existingModels ...*models.GroupUser) GroupMod {
	return GroupModFunc(func(ctx context.Context, o *GroupTemplate) {
		for _, em := range existingModels {
			o.r.GroupUsers = append(o.r.GroupUsers, &groupRGroupUsersR{
				o: o.f.FromExistingGroupUser(em),
			})
		}
	})
}

func (m groupMods) WithoutGroupUsers() GroupMod {
	return GroupModFunc(func(ctx context.Context, o *GroupTemplate) {
		o.r.GroupUsers = nil
	})
}
