// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var Users = Table[
	userColumns,
	userIndexes,
	userForeignKeys,
	userUniques,
	userChecks,
]{
	Schema: "",
	Name:   "users",
	Columns: userColumns{
		ID: column{
			Name:      "id",
			DBType:    "bigint",
			Default:   "nextval('users_id_seq'::regclass)",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Name: column{
			Name:      "name",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		CreatedAt: column{
			Name:      "created_at",
			DBType:    "timestamp with time zone",
			Default:   "CURRENT_TIMESTAMP",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		UpdatedAt: column{
			Name:      "updated_at",
			DBType:    "timestamp with time zone",
			Default:   "CURRENT_TIMESTAMP",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: userIndexes{
		UsersPkey: index{
			Type: "btree",
			Name: "users_pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "users_pkey",
		Columns: []string{"id"},
		Comment: "",
	},

	Comment: "",
}

type userColumns struct {
	ID        column
	Name      column
	CreatedAt column
	UpdatedAt column
}

func (c userColumns) AsSlice() []column {
	return []column{
		c.ID, c.Name, c.CreatedAt, c.UpdatedAt,
	}
}

type userIndexes struct {
	UsersPkey index
}

func (i userIndexes) AsSlice() []index {
	return []index{
		i.UsersPkey,
	}
}

type userForeignKeys struct{}

func (f userForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{}
}

type userUniques struct{}

func (u userUniques) AsSlice() []constraint {
	return []constraint{}
}

type userChecks struct{}

func (c userChecks) AsSlice() []check {
	return []check{}
}
