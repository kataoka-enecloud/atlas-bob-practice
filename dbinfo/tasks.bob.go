// Code generated by BobGen psql v0.41.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbinfo

import "github.com/aarondl/opt/null"

var Tasks = Table[
	taskColumns,
	taskIndexes,
	taskForeignKeys,
	taskUniques,
	taskChecks,
]{
	Schema: "",
	Name:   "tasks",
	Columns: taskColumns{
		ID: column{
			Name:      "id",
			DBType:    "bigint",
			Default:   "nextval('tasks_id_seq'::regclass)",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		Name: column{
			Name:      "name",
			DBType:    "character varying",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		UserID: column{
			Name:      "user_id",
			DBType:    "bigint",
			Default:   "",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		CreatedAt: column{
			Name:      "created_at",
			DBType:    "timestamp with time zone",
			Default:   "CURRENT_TIMESTAMP",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
		UpdatedAt: column{
			Name:      "updated_at",
			DBType:    "timestamp with time zone",
			Default:   "CURRENT_TIMESTAMP",
			Comment:   "",
			Nullable:  false,
			Generated: false,
			AutoIncr:  false,
		},
	},
	Indexes: taskIndexes{
		TasksPkey: index{
			Type: "btree",
			Name: "tasks_pkey",
			Columns: []indexColumn{
				{
					Name:         "id",
					Desc:         null.FromCond(false, true),
					IsExpression: false,
				},
			},
			Unique:        true,
			Comment:       "",
			NullsFirst:    []bool{false},
			NullsDistinct: false,
			Where:         "",
			Include:       []string{},
		},
	},
	PrimaryKey: &constraint{
		Name:    "tasks_pkey",
		Columns: []string{"id"},
		Comment: "",
	},
	ForeignKeys: taskForeignKeys{
		TasksTasksUserIDFkey: foreignKey{
			constraint: constraint{
				Name:    "tasks.tasks_user_id_fkey",
				Columns: []string{"user_id"},
				Comment: "",
			},
			ForeignTable:   "users",
			ForeignColumns: []string{"id"},
		},
	},

	Comment: "",
}

type taskColumns struct {
	ID        column
	Name      column
	UserID    column
	CreatedAt column
	UpdatedAt column
}

func (c taskColumns) AsSlice() []column {
	return []column{
		c.ID, c.Name, c.UserID, c.CreatedAt, c.UpdatedAt,
	}
}

type taskIndexes struct {
	TasksPkey index
}

func (i taskIndexes) AsSlice() []index {
	return []index{
		i.TasksPkey,
	}
}

type taskForeignKeys struct {
	TasksTasksUserIDFkey foreignKey
}

func (f taskForeignKeys) AsSlice() []foreignKey {
	return []foreignKey{
		f.TasksTasksUserIDFkey,
	}
}

type taskUniques struct{}

func (u taskUniques) AsSlice() []constraint {
	return []constraint{}
}

type taskChecks struct{}

func (c taskChecks) AsSlice() []check {
	return []check{}
}
